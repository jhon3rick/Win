/**
 * win - Libreria para web aplicaciones RIA
 * @version v0.0.1
 * @link    https://github.com/jhon3rick/Win.js#readme
 * @author  Jhon Marroquin (Twitter @jhon3rick || email jhon3rick@gmail.com)
 * @license (MIT)
 */

/*
 * Win.js
 * @namespeace Win
 *
 * @version 0.1
 * @author Jhon Marroquin || @jhon3rick
 * @author Jonatan Herran || @jonatan2874
 *
 */

(function() {
  "use strict";
  var Win;

  Win = (function() {
    var $W, CLASS_SELECTOR, HTML_CONTAINERS, ID_SELECTOR, TABLE, TABLE_ROW, TAG_SELECTOR;
    CLASS_SELECTOR = /^\.([\w-]+)$/;
    ID_SELECTOR = /^#[\w\d-]+$/;
    TAG_SELECTOR = /^[\w-]+$/;
    TABLE = document.createElement('table');
    TABLE_ROW = document.createElement('tr');
    HTML_CONTAINERS = {
      "tr": document.createElement("tbody"),
      "tbody": TABLE,
      "thead": TABLE,
      "tfoot": TABLE,
      "td": TABLE_ROW,
      "th": TABLE_ROW,
      "div": document.createElement("div")
    };
    $W = function(selector) {
      var elements;
      if (CLASS_SELECTOR.test(selector)) {
        elements = document.getElementsByClassName(selector.replace(".", ""));
      } else if (TAG_SELECTOR.test(selector)) {
        elements = document.getElementsByTagName(selector);
      } else if (ID_SELECTOR.test(selector)) {
        elements = document.getElementById(selector.replace("#", ""));
      } else {
        elements = document.querySelectorAll(selector);
      }
      return elements;
    };

    /*
    	 * Widges ventana
     */
    $W.Window = function(obj) {
      var autoDestroy, autoLoad, autoScroll, bgBody, bgTitle, body, bodyColor, bodyStyle, closable, clsBody, divClose, divResize, drag, height, html, id, left, modal, resize, theme, title, titleStyle, top, width, win, winModal;
      width = obj.width || 300;
      height = obj.height || 300;
      id = obj.id || '';
      title = obj.title || '';
      titleStyle = obj.titleStyle || '';
      modal = obj.modal || '';
      autoScroll = obj.autoScroll || '';
      closable = typeof obj.closable !== 'undefined' ? obj.closable : true;
      autoDestroy = obj.autoDestroy || '';
      autoLoad = obj.autoLoad || '';
      html = obj.html || '';
      drag = obj.drag || '';
      resize = typeof obj.resize !== 'undefined' ? obj.resize : true;
      theme = obj.theme || '';
      bodyStyle = obj.bodyStyle || '';
      bodyColor = obj.bodyColor || '#FFF';
      body = $W('body')[0];
      winModal = document.createElement('div');
      win = this;
      clsBody = typeof obj.type !== 'undefined' && obj.type !== '' ? 'alert' : '';
      bgBody = obj.bgBody ? 'background-color:' + obj.bgBody + ';' : '';
      bgTitle = obj.bgTitle ? 'background-color:' + obj.bgTitle + ';' : '';
      divClose = resize === true || resize === '' ? "<div class=\"win-title-btn\" id=\"btn_close_ventana_" + id + "\" onclick=\"" + id + ".close()\"></div>" : '';
      divResize = resize === true || resize === '' ? "<div class=\"win-div-resize\" id=\"win_div_resize_" + id + "\"></div>" : '';
      winModal.setAttribute("id", "win_modal_" + id);
      winModal.setAttribute("class", "win-modal");
      left = body.offsetWidth < width ? 0 : (body.offsetWidth - width) / 2;
      top = body.offsetHeight < height ? 0 : (body.offsetHeight - height) / 2;
      winModal.innerHTML = "<div style=\"width:" + width + "; height:" + height + "; top:" + top + "; left:" + left + "; " + bgBody + " " + bodyStyle + "\" id=\"" + id + "\" class=\"win-marco\">\n	<div class=\"win-modal-parent\" id=\"win_modal_window_" + id + "\"><div class=\"win-modal-content\"><div class=\"win-loader-default\" id=\"win_loader_" + id + "\"></div><div class=\"win-modal-label\" id=\"label_cargando_" + id + "\"></div></div></div>\n	<div class=\"win-title\" id=\"win_title_" + id + "\" style=\"" + bgTitle + " " + titleStyle + "\">\n		<div class=\"win-title-txt\">" + title + "</div>\n		" + divClose + "\n	</div>\n	" + divResize + "\n	<div class=\"win-tbar\" id=\"win_tbar_" + id + "\"></div>\n	<div class=\"win-window-body " + clsBody + "\" id=\"win_window_" + id + "\">" + html + "</div>\n</div>\n<script onload>alert(1);</script>";
      body.appendChild(winModal);
      if (typeof obj.tbar !== 'undefined') {
        obj.tbar.id = id;
        $W.tbar(obj.tbar);
      } else {
        $W('#win_tbar_' + id).parentNode.removeChild($W('#win_tbar_' + id));
      }
      if (typeof obj.autoLoad !== 'undefined') {
        $W.Ajax.load($W('#win_window_' + id), obj.autoLoad);
      }
      return {
        close: function() {
          return document.getElementById("" + id).parentNode.parentNode.removeChild(document.getElementById("" + id).parentNode);
        }
      };
    };
    $W.tbar = function(obj) {
      var align, objDiv;
      if (typeof obj === 'object') {
        align = '';
        objDiv = $W('#win_tbar_' + obj.id);
        return obj.forEach(function(json, index, element) {
          if (json.xtype === 'button') {
            return $W.button({
              tbar: objDiv,
              align: align,
              json: json
            });
          } else if (json.xtype === 'buttongroup') {
            json.tbar = objDiv;
            return $W.buttongroup(json);
          } else if (typeof json.items !== 'undefined') {
            json.items.tbar = objDiv;
            return $W.items(json.items);
          } else if (json.xtype === 'tbtext') {
            return $W.tbtext({
              tbar: objDiv,
              align: align,
              json: json
            });
          } else if (json === '-') {
            return $W.separator({
              tbar: objDiv,
              align: align
            });
          } else if (json === '->') {
            return align = 'right';
          }
        });
      }
    };
    $W.items = function(obj) {
      if (typeof obj === 'object') {
        return obj.forEach(function(json, index, element) {
          if (json.xtype === 'panel') {
            json.tbar = obj.tbar;
            return $W.panel(json);
          }
        });
      }
    };
    $W.buttongroup = function(obj) {};
    $W.button = function(obj) {
      var boton, cls, clsAling, id, text;
      text = obj.json.text || '';
      id = obj.json.id || '';
      cls = obj.json.cls || '';
      clsAling = obj.align === 'right' ? 'widge-right' : '';
      boton = document.createElement('div');
      boton.setAttribute("id", id);
      boton.setAttribute("class", "win-btn " + clsAling);
      boton.innerHTML = "<button class=\"" + cls + "\">" + text + "</button>";
      boton.onclick = obj.json.handler;
      return obj.tbar.appendChild(boton);
    };
    $W.panel = function(obj) {
      var bodyStyle, height, id, panel, width;
      id = obj.id || '';
      width = obj.width || 'auto';
      height = obj.height || '100%';
      bodyStyle = obj.bodyStyle || '';
      panel = document.createElement('div');
      panel.setAttribute("id", id);
      panel.setAttribute("class", "win-panel ");
      panel.setAttribute("style", 'width:' + width + ';height:' + height + ';' + bodyStyle);
      obj.tbar.appendChild(panel);
      if (typeof obj.autoLoad !== 'undefined') {
        return $W.Ajax.load(panel, obj.autoLoad);
      } else if (typeof obj.html !== 'undefined') {
        return panel.innerHTML = obj.html;
      }
    };
    $W.tbtext = function(obj) {
      var clsAling, text;
      text = document.createElement('div');
      clsAling = obj.align === 'right' ? 'widge-right' : '';
      text.setAttribute("id", "win_tbtext_" + obj.json.id);
      text.setAttribute("class", "win-tbtext " + clsAling);
      text.innerHTML = "<div>" + obj.json.text + "</div>";
      return obj.tbar.appendChild(text);
    };
    $W.separator = function(obj) {
      var clsAling, div;
      div = document.createElement('div');
      clsAling = obj.align === 'right' ? 'widge-right' : '';
      div.setAttribute("class", "win-separator " + clsAling);
      div.innerHTML = "<div>|</div>";
      return obj.tbar.appendChild(div);
    };

    /*
    	 * Get Elements
     */
    $W.getButton = function(id) {
      this.hiden = function(id) {
        return $W('#id').style.display = 'none';
      };
      this.show = function(id) {
        return $W('#id').style.display = 'block';
      };
      return id;
    };
    $W.get = function(element_id) {
      return {
        load: function(obj) {
          var dom_element;
          dom_element = $W(element_id);
          return $W.Ajax.load(dom_element, obj);
        },
        element: function() {
          return $W(element_id);
        }
      };
    };
    $W.loading = function(obj) {
      var duracion, estilo_texto, evento_icono, icono, iconos, loader, mask, text, texto;
      if (typeof obj.id_ventana === 'undefined' || typeof obj.estado === 'undefined') {
        console.warn('Funcion: Loading (Mostrar ventana modal)\nFaltan parametros en el objeto\nParametro Obligatorios: id_ventana ,estado');
        return;
      }
      if (!$W('#win_window_' + obj.id_ventana)) {
        console.warn('Funcion: Loading (Mostrar ventana modal)\nEl id de la ventana es incorrecto no se encuentra la ventana ' + id_ventana);
        return;
      }
      mask = $W('#win_modal_window_' + obj.id_ventana);
      text = obj.text || 'Cargando...';
      loader = obj.loader || 'default';
      if (obj.estado === 'on') {
        $W('#win_modal_window_' + obj.id_ventana).innerHTML = '<div class="win-modal-content"><div class="win-loader-default" id="win_loader_' + obj.id_ventana + '"></div><div class="win-modal-label" id="label_cargando_' + obj.id_ventana + '"></div></div>';
        mask.style.visibility = 'visible';
        $W('#win_loader_' + obj.id_ventana).setAttribute('class', 'win-loader-' + loader);
        return $W('#label_cargando_' + obj.id_ventana).innerHTML = text;
      } else if (obj.estado === 'off') {
        iconos = {
          sucess: '',
          fail: '',
          warm: ''
        };
        if (obj) {
          icono = iconos[obj.icono] || iconos['sucess'];
          evento_icono = obj.evento_icono || '';
          texto = obj.texto || 'Informacion Almacenada';
          duracion = obj.duracion || '2000';
          estilo_texto = obj.estilo_texto || 'padding-top: 10px;font-size: 12px;color:#FFF;';
        } else {
          icono = iconos.sucess;
          evento_icono = '';
          texto = 'Informacion Almacenada';
          duracion = '2000';
          estilo_texto = 'padding-top: 10px;font-size: 12px;color:#FFF;';
        }
        if (duracion === 'infinito') {
          return $W('#win_modal_window_' + obj.id_ventana).innerHTML = "<div class='win-modal-content'><div class='win-modal-img-finish'><img src='" + icono + "' onclick='" + evento_icono + "'; ><br><div class='win-modal-label label-finish' >" + texto + "</div></div></div>";
        } else {
          $W('#win_modal_window_' + obj.id_ventana).innerHTML = "<div class='win-modal-content'><div class='win-modal-img-finish'><img src='" + icono + "' onclick='" + evento_icono + "'; ><br><div class='win-modal-label label-finish' >" + texto + "</div></div></div>";
          return setTimeout((function() {
            return mask.style.visibility = 'hidden';
          }), duracion);
        }
      }
    };
    $W.Alert = function(obj) {
      var Win_ventana_alert, height, text, title, width;
      if (typeof obj === 'undefined') {
        console.warn('Para utiliza la propiedad alert debe enviar el objeto con los parametros\nConsulte la documentacion');
        return;
      }
      width = 250;
      height = 120;
      title = obj.title || 'Alert';
      text = obj.text || '';
      text += '<div class="content-btn"><input type="button" value="Aceptar" onclick="document.getElementById(\'Win_ventana_alert\').parentNode.parentNode.removeChild(document.getElementById(\'Win_ventana_alert\').parentNode)"></div>';
      return Win_ventana_alert = new $W.Window({
        width: width,
        height: height,
        id: 'Win_ventana_alert',
        title: title,
        html: text,
        type: 'alert',
        modal: true,
        autoScroll: true,
        closable: false,
        autoDestroy: true,
        drag: false,
        resize: false
      });
    };
    $W.Confirm = function(obj) {
      var height, text, title, width;
      if (typeof obj === 'undefined') {
        console.warn('Para utiliza la propiedad alert debe enviar el objeto con los parametros\nConsulte la documentacion');
        return;
      }
      width = 250;
      height = 120;
      title = obj.title || 'Confirm';
      text = obj.text || '';
      text += '<div class="content-btn"><input type="button" value="Aceptar" onclick="document.getElementById(\'Win_ventana_confirm\').parentNode.parentNode.removeChild(document.getElementById(\'Win_ventana_confirm\').parentNode);' + obj.functionOK + ';"> <input type="button" value="Cancelar" onclick="document.getElementById(\'Win_ventana_confirm\').parentNode.parentNode.removeChild(document.getElementById(\'Win_ventana_confirm\').parentNode);return false;"></div>';
      return new $W.Window({
        width: width,
        height: height,
        id: 'Win_ventana_confirm',
        title: title,
        html: text,
        type: 'alert',
        modal: true,
        autoScroll: true,
        closable: false,
        autoDestroy: true,
        drag: false,
        resize: false
      });
    };
    $W.version = "0.0.1";
    return $W;
  })();

  this.Win = this.$W = Win;


  /*
   * Validacion campos formulario
   *
   * tecla==8 		//BACKSPACE
   * tecla==9 		//TAB
   * tecla==0 		//TAB
   * tecla==13 	//ENTER
   *
   */

  $W.form = (function() {
    return {
      intField: function(obj) {
        $W('#' + obj.applyTo).className += " win-input-number";
        $W('#' + obj.applyTo).onkeypress = function(event) {
          return Win.form.validateIntField({
            event: event,
            eventType: 'keypress',
            input: this
          });
        };
        return $W('#' + obj.applyTo).onchange = function(event) {
          return Win.form.validateIntField({
            event: event,
            eventType: 'change',
            input: this
          });
        };
      },
      doubleField: function(obj) {
        $W('#' + obj.applyTo).className += " win-input-number";
        $W('#' + obj.applyTo).onkeypress = function(event) {
          return Win.form.validateDoubleField({
            event: event,
            eventType: 'keypress',
            input: this
          });
        };
        return $W('#' + obj.applyTo).onchange = function(event) {
          return Win.form.validateDoubleField({
            event: event,
            eventType: 'change',
            input: this
          });
        };
      },
      textField: function(obj) {
        $W('#' + obj.applyTo).onkeyup = function(event) {
          return Win.form.validateTextField({
            event: event,
            eventType: 'keyup',
            input: this,
            type: obj.type
          });
        };
        return $W('#' + obj.applyTo).onchange = function(event) {
          return Win.form.validateTextField({
            event: event,
            eventType: 'change',
            input: this,
            type: obj.type
          });
        };
      },
      emailField: function(obj) {
        return $W('#' + obj.applyTo).onchange = function(event) {
          return Win.form.validateEmailField({
            event: event,
            input: this
          });
        };
      },
      globalField: function(obj) {},
      validateIntField: function(obj) {
        var tecla;
        tecla = document.all ? obj.event.keyCode : obj.event.which;
        if (tecla === 8 || tecla === 9 || tecla === 0 || tecla === 13) {
          return true;
        } else if (obj.eventType === 'keypress') {
          return /\d/.test(String.fromCharCode(tecla));
        } else if (obj.eventType === 'change') {
          return obj.input.value = obj.input.value.replace(/[^\d.]/g, '');
        }
      },
      validateDoubleField: function(obj) {
        var arrayValue, tecla, validate;
        tecla = document.all ? obj.event.keyCode : obj.event.which;
        if (tecla === 8 || tecla === 9 || tecla === 0 || tecla === 13) {
          return true;
        } else if (obj.eventType === 'keypress') {
          return /[\d.]/.test(String.fromCharCode(tecla));
        } else if (obj.eventType === 'change') {
          obj.input.value = obj.input.value.replace(/[^\d.]/g, '');
          console.log(!!obj.input.value.toString().match(/(^-?\d\d*[\.|,]\d*$)|(^-?\d\d*$)|(^-?[\.|,]\d\d*$)/));
          validate = !!obj.input.value.toString().match(/(^-?\d\d*[\.|,]\d*$)|(^-?\d\d*$)|(^-?[\.|,]\d\d*$)/);
          if (!validate) {
            arrayValue = obj.input.value.split(".");
            return obj.input.value = arrayValue[0] + '.' + arrayValue[1];
          }
        }
      },
      validateTextField: function(obj) {
        var tecla;
        tecla = document.all ? obj.event.keyCode : obj.event.which;
        if (tecla === 8 || tecla === 9 || tecla === 0 || tecla === 13) {
          return true;
        } else if (obj.eventType === 'keyup') {
          if (obj.type === 'uppercase') {
            return obj.input.value = obj.input.value.toUpperCase();
          } else if (obj.type === 'lowercase') {
            return obj.input.value = obj.input.value.toLowerCase();
          }
        } else if (obj.eventType === 'change') {
          return obj.input.value = obj.input.value.replace(/[\#\-\"\']/g, '');
        }
      },
      validateEmailField: function(obj) {
        var validate;
        validate = !!obj.input.value.toString().match(/(^[a-z0-9]([0-9a-z\-_\.]*)@([0-9a-z_\-\.]*)([.][a-z]{3})$)|(^[a-z]([0-9a-z_\.\-]*)@([0-9a-z_\-\.]*)(\.[a-z]{2,4})$)/i);
        if (!validate) {
          obj.input.value = "";
          return obj.input.focus();
        }
      },

      /*
      	 * Calendar
       */
      dateField: function(obj) {
        var arrayDate, calendarId, drawCalendar, findPos, format, formatDate, formatField, getDayName, getDaysInMonth, getFirstDayofMonth, getMonthName, inputCalendar, removeCalendar, selected, selectedDay, selectedMonth, selectedYear, separator, setPos, setupLinks, valueField;
        separator = '-';
        calendarId = obj.applyTo;
        format = obj.format || 'y-m-d';
        selected = obj.listeners.select || '';
        inputCalendar = $W('#' + calendarId);
        inputCalendar.dataset.icon = 'date';
        if (typeof obj.value !== 'undefined') {
          inputCalendar.value = obj.value;
        }
        arrayDate = [];
        separator = (format.replace(/[a-zA-Z\d\s]/g, ''))[0];
        formatField = format.replace(/[^a-zA-Z\d\s]/g, '');
        valueField = inputCalendar.value.replace(/[^\d]/g, '');
        if (inputCalendar.value === '') {
          selectedYear = new Date().getFullYear();
          selectedMonth = new Date().getMonth();
          selectedDay = new Date().getDate();
        } else {
          arrayDate[formatField[0]] = valueField[0];
          arrayDate[formatField[1]] = valueField[1];
          arrayDate[formatField[2]] = valueField[2];
          selectedYear = new Date(arrayDate.y).getFullYear();
          selectedMonth = new Date(arrayDate.m).getMonth();
          selectedDay = new Date(arrayDate.d).getDate();
        }
        inputCalendar.readOnly = true;
        inputCalendar.onclick = function() {
          if ($W('#date_' + calendarId)) {
            $W('#date_' + calendarId).parentNode.removeChild($W('#date_' + calendarId));
            return;
          }
          drawCalendar(this);
          return setupLinks(this);
        };
        drawCalendar = function(inputObj) {
          var calendarDiv, day, daysInMonth, e, f, html, j, k, l, len, noPrintDays, numRows, printDate, ref, startDay, thisMonth, thisYear, today, weekDays;
          html = "<a id=\"closeCalendar\">Close Calendar</a>\n<table cellpadding=\"0\" cellspacing=\"0\" id=\"linksTable\">\n	<tr>\n		<td><a id=\"prevMonth\"><</a></td>\n		<td><a id=\"nextMonth\">></a></td>\n	</tr>\n</table>\n<table id=\"calendar\" cellpadding=\"0\" cellspacing=\"0\"`class=\"win-calendar\">\n	<tr>\n		<th colspan=\"7\" class=\"calendarHeader\">" + getMonthName(selectedMonth) + ' ' + selectedYear + "</th>\n</tr>\n<tr class=\"weekDaysTitleRow\">";
          weekDays = ['D', 'L', 'M', 'M', 'J', 'V', 'S'];
          for (j = 0, len = weekDays.length; j < len; j++) {
            day = weekDays[j];
            html += "<td>" + day + "</td>";
          }
          daysInMonth = getDaysInMonth(selectedYear, selectedMonth);
          startDay = getFirstDayofMonth(selectedYear, selectedMonth);
          numRows = 0;
          printDate = 1;
          if (startDay !== 7) {
            numRows = Math.ceil((startDay + 1 + daysInMonth) / 7);
            noPrintDays = startDay + 1;
          } else {
            noPrintDays = 0;
          }
          today = new Date().getDate();
          thisMonth = new Date().getMonth();
          thisYear = new Date().getFullYear();
          for (e = k = 0, ref = numRows; 0 <= ref ? k < ref : k > ref; e = 0 <= ref ? ++k : --k) {
            html += '<tr class="weekDaysRow">';
            for (f = l = 0; l < 7; f = ++l) {
              if (printDate === today && selectedYear === thisYear && selectedMonth === thisMonth && noPrintDays === 0) {
                html += '<td id="today" class="weekDaysCell">';
              } else {
                html += '<td class="weekDaysCell">';
              }
              if (noPrintDays === 0) {
                if (printDate <= daysInMonth) {
                  html += "<a>" + printDate + "</a>";
                }
                printDate++;
              }
              html += '</td>';
              if (noPrintDays > 0) {
                noPrintDays--;
              }
            }
            html += '</tr>';
          }
          html += '</table>';
          calendarDiv = document.createElement("div");
          calendarDiv.innerHTML = html;
          calendarDiv.setAttribute("id", "date_" + calendarId);
          $W('#' + calendarId).parentNode.insertBefore(calendarDiv, $W('#' + calendarId).nextSibling);
          setPos(inputCalendar, calendarDiv);
          $W('#closeCalendar').onclick = function() {
            return removeCalendar(calendarDiv);
          };
          $W('#prevMonth').onclick = function() {
            selectedMonth--;
            if (selectedMonth < 0) {
              selectedMonth = 11;
              selectedYear--;
            }
            drawCalendar(inputObj);
            return setupLinks(inputObj);
          };
          return $W('#nextMonth').onclick = function() {
            selectedMonth++;
            if (selectedMonth > 11) {
              selectedMonth = 0;
              selectedYear++;
            }
            drawCalendar(inputObj);
            return setupLinks(inputObj);
          };
        };
        removeCalendar = function(obj) {
          return obj.parentNode.removeChild(obj);
        };
        setupLinks = function(inputObj) {
          var i, j, len, results, x, y;
          y = $W('#calendar');
          x = y.getElementsByTagName('a');
          results = [];
          for (j = 0, len = x.length; j < len; j++) {
            i = x[j];
            results.push(i.onclick = function() {
              inputCalendar.selected = selected;
              inputCalendar.selected();
              selectedDay = this.innerHTML;
              inputObj.value = formatDate(selectedDay, selectedMonth, selectedYear);
              return removeCalendar($W('#date_' + calendarId));
            });
          }
          return results;
        };
        formatDate = function(Day, Month, Year) {
          var array, dateString;
          Month++;
          if (Month < 10) {
            Month = '0' + Month;
          }
          if (Day < 10) {
            Day = '0' + Day;
          }
          array = [];
          array['y'] = Year;
          array['m'] = Month;
          array['d'] = Day;
          return dateString = array[formatField[0]] + separator + array[formatField[1]] + separator + array[formatField[2]];
        };
        getMonthName = function(month) {
          var monthNames;
          monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
          return monthNames[month];
        };
        getDayName = function(day) {
          var dayNames;
          dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
          return dayNames[day];
        };
        getDaysInMonth = function(year, month) {
          return 32 - new Date(year, month, 32).getDate();
        };
        getFirstDayofMonth = function(year, month) {
          var day;
          return day = new Date(year, month, 0).getDay();
        };
        setPos = function(targetObj, moveObj) {
          var coors;
          coors = findPos(targetObj);
          moveObj.style.position = 'absolute';
          moveObj.style.top = coors[1] + 18 + 'px';
          return moveObj.style.left = coors[0] + 'px';
        };
        return findPos = function(obj) {
          var curleft, curtop;
          curleft = curtop = 0;
          if (obj.offsetParent) {
            curleft = obj.offsetLeft;
            curtop = obj.offsetTop;
            while ((obj = obj.offsetParent)) {
              curleft += obj.offsetLeft;
              curtop += obj.offsetTop;
            }
          }
          return [curleft, curtop];
        };
      }
    };
  })();


  /*
   * Request XHR
   */

  $W.Ajax = (function() {
    return {
      request: function(obj) {
        var bodyXhr, method, obj_loading, parametros, value, xhr;
        parametros = '';
        if (typeof obj.id_ventana === 'undefined') {
          console.warn("Debe enviar el parametro id_ventana, para poder mostrar el loading");
          return;
        }
        if (typeof obj.params !== 'undefined') {
          for (value in obj.params) {
            parametros += parametros === '' ? value + "=" + obj.params[value] : "&" + value + "=" + obj.params[value];
          }
        }
        if (obj.modal === true || obj.modal === '') {
          obj_loading = {
            id_ventana: obj.id_ventana,
            text: obj.text,
            loader: obj.loader,
            icono: obj.iconFinish,
            icono: obj.iconFinish,
            texto: obj.textFinish,
            duracion: obj.duracionFinish,
            estado: 'on'
          };
          Win.loading(obj_loading);
        }
        xhr = new XMLHttpRequest;
        bodyXhr = obj.url + '?' + parametros;
        method = obj.method || 'POST';
        xhr.open(method, bodyXhr, true);
        xhr.onreadystatechange = function() {
          var response;
          if (xhr.readyState === 4) {
            response = xhr.responseText;
            if ((obj.modal === true || obj.modal === '') && (obj.autoClose === true || obj.autoClose === '')) {
              obj_loading.estado = 'off';
              Win.loading(obj_loading);
            }
            return obj.success(response, xhr);
          } else {
            if ((obj.modal === true || obj.modal === '') && (obj.autoClose === true || obj.autoClose === '')) {
              obj_loading.estado = 'off';
              Win.loading(obj_loading);
            }
            return obj.failure(xhr);
          }
        };
        return xhr.send(null);
      },
      load: function(dom_element, obj) {
        var bodyXhr, eval_script, extract_script, method, parametros, tagScript, text, value, xhr;
        parametros = '';
        tagScript = '(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)';
        if (typeof obj.params !== 'undefined') {
          for (value in obj.params) {
            parametros += parametros === '' ? value + "=" + obj.params[value] : "&" + value + "=" + obj.params[value];
          }
        }
        text = obj.text || 'cargando...';
        dom_element.innerHTML = '<div class="win-content-min-load" ><div class="win-content-min-load-img"><div class="win-min-load-ajax"></div></div><div class="win-content-min-load-label">' + text + '</div></div>';
        xhr = new XMLHttpRequest;
        bodyXhr = obj.url + '?' + parametros;
        method = obj.method || 'POST';
        xhr.open(method, bodyXhr, true);
        xhr.onreadystatechange = function() {
          var html, response;
          if (xhr.readyState === 4) {
            response = xhr.responseText;
            html = extract_script(response);
            dom_element.innerHTML = html;
            return eval_script(response);
          }
        };
        xhr.send(null);
        extract_script = function(string) {
          var SearchExp;
          SearchExp = new RegExp(tagScript, 'img');
          return string.replace(SearchExp, '');
        };
        return eval_script = function(string) {
          var script, scripts;
          scripts = string.match(new RegExp(tagScript, 'img')) || [];
          script = '';
          scripts.map(function(script_map) {
            return script += (script_map.match(new RegExp(tagScript, 'im')) || ['', ''])[1];
          });
          return eval(script);
        };
      }
    };
  })();


  /*
   * CONFIG INI
   */


  /*
   * Desktop
   */

  Win.Desktop = function(obj) {
    var background, backgroundImage, heightIcon, widthIcon;
    widthIcon = obj.widthIcon || 20;
    heightIcon = obj.heightIcon || 20;
    background = obj.background ? 'background-color:' + obj.background + ';' : '';
    backgroundImage = obj.backgroundImage ? 'background-image:' + obj.background + ';' : '';
    this.modulos = function(obj) {
      var div;
      div = '<div style="height:100%"> <div class="desk-content-modulos">';
      obj.forEach(function(array, index, element) {
        return div += "<div class=\"desk-modulo\" style=\"width:" + widthIcon + "; height:" + heightIcon + ";\">\n	<div></div>\n	<div>" + obj.text + "</div>\n</div>";
      });
      div += '</div></div>';
      return document.querySelector('body').innerHTML = div;
    };
    if (typeof obj.modulos === 'object') {
      return this.modulos(obj.modulos);
    }
  };

}).call(this);
